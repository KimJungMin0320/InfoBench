{"input": "The typical avocado is over 300 calories from the oil in it. That\u2019s the amount of calories in a large candy bar. If you get enough exercise to eat a large candy bar every day without gaining weight, it wouldn\u2019t be a problem to eat an avocado every day. Other wise you should probably eat them sparingly.", "category": "Quora", "instruction": "Choose an appealing title for your post.", "decomposed_questions": ["Is the generated text a post title?", "Is the generated text appealing as a post tile?", "Is the generated post title suitable for the post in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"], ["Content"]], "output": "\"Balancing Your Calorie Intake: Avocados vs. Candy Bars\"", "id": "user_oriented_task_167", "eval": [true, null]}
{"input": "Language: Python\nFunction: input", "category": "w3schools", "instruction": "Given a programming language and the name of a function, write a command to show how to use the function.", "decomposed_questions": ["Does the generated text include a command?", "Is the command in the generated text in the given programming language (Python)?", "Does the command in the generated text show how to use the function in the given input?", "Is the command in the generated text correct?"], "subset": "Easy_set", "question_label": [["Format"], ["Linguistic"], ["Content"], ["Content"]], "output": "output:\n\"In Python, the 'input' function is used to get input from the user. Here is an example of how to use it:\n\n```python\nuser_input = input(\"Please enter your name: \")\nprint(\"Hello, \" + user_input + \"!\")\n```\n\nIn this example, the program will print a message asking the user to enter their name. The user's input will then be stored in the 'user_input' variable, and the program will print a greeting that includes the user's name.\"", "id": "user_oriented_task_205", "eval": [true, null]}
{"input": "We were recently able to increase the amount of stock we hold with the same supplier thereby reducing our risk.", "category": "Grammarly", "instruction": "Change the first person to the third person in the given sentence. The meaning should be kept, but you can paraphrase it or expand it in order to have a better pose.", "decomposed_questions": ["Is the generated text expressed in third person?", "Does the generated text have a better pose than the given input?", "Does the generated text convey the same meaning as the original sentence in the given input?"], "subset": "Easy_set", "question_label": [["Linguistic"], ["Style"], ["Content"]], "output": "\"They recently managed to augment the volume of stock they maintain from the same supplier, consequently diminishing their risk.\"", "id": "user_oriented_task_187", "eval": [true, null]}
{"input": "Programming for Everybody (Getting Started with Python)", "category": "Coursera", "instruction": "Design a syllabus for the given course. Students should be given a list of the chapters with brief explanations of each chapter's purpose.", "decomposed_questions": ["Is the generated text a course syllabus?", "Does the generated text include a list of chapters?", "Does every chapter in the generated list include a description?", "Is the description of each chapter in the generated text concise?", "Is the generated text relevant to the course in the given input?", "Does the description of each chapter in the generated text explain the purpose of the chapter?"], "subset": "Easy_set", "question_label": [["Format"], ["Format"], ["Format"], ["Style"], ["Content"], ["Content"]], "output": "Course Title: Programming for Everybody (Getting Started with Python)\n\nSyllabus:\n\nChapter 1: Introduction to Programming\nThis chapter will introduce students to the basics of programming. It will cover the importance of programming, its applications, and the role of Python in the programming world.\n\nChapter 2: Python Basics\nThis chapter will cover the basics of Python programming. It includes understanding Python syntax, variables, data types, and operators.\n\nChapter 3: Control Structures\nThis chapter will introduce students to control structures in Python. It will cover conditional statements, loops, and flow of control.\n\nChapter 4: Functions and Modules\nThis chapter will delve into the concept of functions and modules in Python. It will teach students how to create, use, and import functions and modules.\n\nChapter 5: Data Structures\nThis chapter will cover Python's built-in data structures like lists, tuples, sets, and dictionaries. It will also introduce students to the concept of mutability.\n\nChapter 6: File Handling\nThis chapter will teach students how to read from and write to files using Python. It will also cover file handling exceptions.\n\nChapter 7: Exception Handling\nThis chapter will introduce students to error handling in Python. It will cover the basics of exceptions, how to catch and handle them, and how to raise them.\n\nChapter 8: Object-Oriented Programming\nThis chapter will introduce students to the concept of Object-Oriented Programming (OOP) in Python. It will cover classes, objects, inheritance, and polymorphism.\n\nChapter 9: Python Libraries\nThis chapter will introduce students to some of the most commonly used Python libraries like NumPy, Pandas, and Matplotlib. It will cover how to install and use these libraries.\n\nChapter 10: Real-World Python Applications\nThis chapter will cover real-world applications of Python. It will include mini-projects that will help students apply the concepts they have learned throughout the course.\n\nChapter 11: Advanced Python Topics\nThis chapter will cover advanced Python topics like decorators, generators, and metaclasses. It will help students deepen their understanding of Python.\n\nChapter 12: Final Project\nThis chapter will involve a final project where students will be required to apply all the concepts learned throughout the course. This will help them gain practical experience and confidence in their Python programming skills.", "id": "user_oriented_task_103", "eval": [true, null]}
{"input": "", "category": "Leetcode", "instruction": "Think of topics that are most common in classic interview questions for a job in computer science.", "decomposed_questions": ["Does the generated text include some topics?", "Are the generated topics relevant to computer science?", "Are the generated topics suitable for interview questions?", "Are the generated topics common subjects in the classic interview?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"], ["Content"], ["Content"]], "output": "1. Data Structures and Algorithms\n2. Programming Languages\n3. Operating Systems\n4. Computer Networks\n5. Database Management Systems\n6. Software Development Life Cycle\n7. Object-Oriented Programming\n8. System Design\n9. Cybersecurity\n10. Artificial Intelligence and Machine Learning\n11. Web Development\n12. Cloud Computing\n13. Problem-Solving Skills\n14. Coding and Debugging\n15. Project Management\n16. Version Control Systems\n17. Software Testing and Quality Assurance\n18. Big Data and Data Analysis\n19. Computer Graphics and Visualization\n20. Information Retrieval.", "id": "user_oriented_task_94", "eval": [true, true, null]}
{"input": "How do you say \"good evening\" in French.", "category": "Doulingo", "instruction": "Answer the following question.", "decomposed_questions": ["Does the generated text provide a correct answer to the question in the given input?"], "subset": "Easy_set", "question_label": [["Content", "Format"]], "output": "\"You say \"good evening\" in French by saying \"Bonsoir\".\"", "id": "user_oriented_task_124", "eval": [true]}
{"input": "adding an image to the page", "category": "w3schools", "instruction": "Write the HTML syntax for the required action.", "decomposed_questions": ["Is the generated text in HTML syntax?", "Is the HTML syntax correct for the required actiont in the given input?"], "subset": "Easy_set", "question_label": [["Linguistic"], ["Content"]], "output": "```html\n<img src=\"image.jpg\" alt=\"Description of the image\">\n```", "id": "user_oriented_task_242", "eval": [true, null]}
{"input": "Theme: Circuits", "category": "instructables", "instruction": "There are many creative projects we can build at home that are related to the given theme, so let's list some of them.", "decomposed_questions": ["Is the generated text a list?", "Are the items in the generated list relevant to the theme in the given input?", "Can the projects in the generated text be built at home?", "Are the projects in the generated text creative?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"], ["Content"], ["Content"]], "output": "1. DIY LED Light Circuit: This project involves creating a simple circuit to light up an LED. It's a great way to learn about how electricity flows through a circuit.\n\n2. Homemade Radio: This project involves building a simple AM radio circuit. It's a fun way to learn about radio waves and how they're used in communication.\n\n3. Solar-Powered Phone Charger: This project involves creating a circuit that uses solar power to charge a phone. It's a great way to learn about renewable energy.\n\n4. Electronic Dice: This project involves creating a circuit that randomly lights up LEDs to mimic the roll of a dice. It's a fun way to learn about probability and randomness in circuits.\n\n5. DIY Burglar Alarm: This project involves creating a simple circuit that triggers an alarm when a door or window is opened. It's a practical way to learn about circuits and home security.\n\n6. Light-Sensitive Lamp: This project involves creating a circuit that turns on a lamp when it gets dark. It's a great way to learn about light sensors and how they can be used in circuits.\n\n7. DIY Metal Detector: This project involves creating a circuit that can detect metal. It's a fun way to learn about magnetic fields and how they interact with electrical currents.\n\n8. Homemade Electric Motor: This project involves creating a simple electric motor from scratch. It's a great way to learn about electromagnetism and how it's used in motors.\n\n9. DIY Theremin: This project involves creating a simple theremin, a musical instrument that's played without being touched. It's a fun way to learn about radio waves and how they can be used to create sound.\n\n10. Battery-Powered Fan: This project involves creating a simple circuit that powers a fan. It's a practical way to learn about how electricity can be used to create motion.", "id": "user_oriented_task_111", "eval": [true, null]}
{"input": "Name: Jane\nMain points:\n- Architect\n- Interested in Tech\nWritten in first person\nUse casual tone", "category": "Twitter", "instruction": "Write a good Twitter Bio. Try to cover all the provided main points in your generated bio.", "decomposed_questions": ["Is the generated text a Twitter Bio?", "Is the generated text written in the first person?", "Does the generated text use a casual tone?", "Does the generated text cover all information from the given input?", "Is the generated Twitter Bio good?"], "subset": "Easy_set", "question_label": [["Format"], ["Linguistic"], ["Style"], ["Content"], ["Content"]], "output": "\"Hey there! I'm Jane, a creative architect with a serious love for all things tech. Always on the hunt for the next big innovation. #Architect #TechEnthusiast\"", "id": "user_oriented_task_54", "eval": [true, false, null]}
{"input": "Chicago: Vaswani, Ashish, Shazeer, Noam, Parmar, Niki, Uszkoreit, Jakob, Jones, Llion, Gomez, Aidan N., Kaiser, Lukasz, and Illia Polosukhin. \"Attention Is All You Need.\" arXiv, (2017). https://doi.org/10.48550/arXiv.1706.03762.\nMLA:", "category": "Google Scholar", "instruction": "You are given a paper citation, convert it to the requested citation style.", "decomposed_questions": ["Is the generated text a paper citation?", "Does the generated text comply with the requested citation style (MLA citation style)?", "Does the generated paper citation match the citation in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Format"], ["Content"]], "output": "output:\n\"Vaswani, Ashish, et al. \"Attention Is All You Need.\" arXiv, 2017, https://doi.org/10.48550/arXiv.1706.03762.\"", "id": "user_oriented_task_3", "eval": [true, null]}
{"input": "Cute cat\nplayful\nSoft", "category": "Instagram", "instruction": "Use appropriate emojis to convey the meaning in the given text.", "decomposed_questions": ["Does the generated text include emojis?", "Does the items in the given input have a one-to-one association with the emojis in the generated text?", "Does the generated emojis represent the given input properly?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"], ["Content"]], "output": "\"\ud83d\ude3a\ud83d\udc31\n\ud83d\ude38\n\ud83e\uddf8\ud83e\uddf6\"", "id": "user_oriented_task_64", "eval": [true, null]}
{"input": "Crew Members", "category": "Indeed", "instruction": "Provide a list of the skills that may help you find the job.", "decomposed_questions": ["Is the generated text a list of skills?", "Are the skills in the generated text relevant to find the job in the given input?"], "subset": "Easy_set", "question_label": [["Format", "Content"], ["Content"]], "output": "1. Leadership Skills\n2. Teamwork and Collaboration\n3. Communication Skills\n4. Problem-Solving Skills\n5. Attention to Detail\n6. Physical Stamina and Strength\n7. Technical Skills\n8. Ability to Work Under Pressure\n9. Time Management Skills\n10. Customer Service Skills\n11. Navigation Skills\n12. First Aid and Safety Training\n13. Mechanical Skills\n14. Adaptability and Flexibility\n15. Conflict Resolution Skills\n16. Multitasking Abilities\n17. Organizational Skills\n18. Decision-Making Skills\n19. Crisis Management Skills\n20. Knowledge of Safety Procedures and Protocols.", "id": "user_oriented_task_172", "eval": [true, null]}
{"input": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes.\nQuestion: What is English constituency parsing?", "category": "Explainpaper", "instruction": "Answer the question about the paper after reading it carefully.", "decomposed_questions": ["Is the generated text an answer relevant to the question in the given input?", "Is the answer in the generated text correct according to the paper in the given input?"], "subset": "Easy_set", "question_label": [["Format", "Content"], ["Content"]], "output": "English constituency parsing is a task in natural language processing that involves analyzing the grammatical structure of a sentence. It presents specific challenges because the output is subject to strong structural constraints and is significantly longer than the input.", "id": "user_oriented_task_176", "eval": [true, null]}
{"input": "Name: Pizzeria\ngood prices, quiet place, tasty, nice staff", "category": "Yelp", "instruction": "Based on the given keywords, write a review of a restaurant.", "decomposed_questions": ["Is the generated text a review of a retaurant?", "Is the generated text relevant to the keywords in the given input?", "Are all the keywords in the given input contained in the generated text?"], "subset": "Easy_set", "question_label": [["Format", "Content"], ["Content"], ["Content"]], "output": "Review:\n\nI recently had the pleasure of dining at Pizzeria and I must say, it was an experience worth sharing. The first thing that caught my attention was their good prices. In a world where dining out can often be a costly affair, Pizzeria offers a refreshing change with its affordable menu. \n\nThe ambiance of the place is another aspect that deserves a mention. It's a quiet place, perfect for those who prefer a peaceful dining experience away from the hustle and bustle of the city. The tranquility of the place allows you to truly savor your meal and enjoy your company.\n\nSpeaking of meals, the food at Pizzeria is simply delicious. Every dish we ordered was tasty and left us craving for more. The flavors were well-balanced and the ingredients tasted fresh. The star of the show, of course, was their pizza. It was perfectly cooked with a delightful crust and a generous topping of cheese.\n\nLastly, the staff at Pizzeria were incredibly nice. They were attentive, friendly, and made sure we had everything we needed. Their service truly enhanced our dining experience.\n\nIn conclusion, Pizzeria is a great place to enjoy a delicious meal without breaking the bank. With its quiet ambiance, tasty food, and nice staff, it's a place I would highly recommend.", "id": "user_oriented_task_223", "eval": [true, null]}
{"input": "two things are infinite", "category": "(Wolfram alpha)?", "instruction": "You will be tested on your knowledge of classic witticisms and aphorisms by completing the given aphorism. Write the original quote as the answer.", "decomposed_questions": ["Is the generated text an aphorism?", "Is the aphorism in the generated text a complete one of the aphorism in the given input?", "Is the generated text the correct original quote of the aphorism in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"], ["Content"]], "output": "\"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\"", "id": "user_oriented_task_147", "eval": [true, null]}
{"input": "The Shining", "category": "Netflix", "instruction": "Summarize the movie in a snarky way. Try to explain the movie in just one sentence.", "decomposed_questions": ["Is the generated text the summary of a movie?", "Does the generated summary only contain one sentence?", "Is the generated summary written in a snarky way?", "Does the generated summary relevant to the movie in the given input?"], "subset": "Easy_set", "question_label": [["Format", "Content"], ["Format", "Number"], ["Style"], ["Content"]], "output": "\"An aspiring writer takes a hotel caretaker job, only to discover that writer's block is the least of his worries in this extended winter vacation from hell.\"", "id": "user_oriented_task_199", "eval": [true, null]}
{"input": "Subject: Asking for Vacation Time\nHi [Employer], \nI hope all is well. I am writing to request a day off on [date]. I have already taken care of my work responsibilities for that day and will be available to answer any questions or concerns you may have. \nThank you for your time, \n[Your name]", "category": "Gmail", "instruction": "The tone of the email should be changed and rewritten in a more professional manner.", "decomposed_questions": ["Is the generated text an email?", "Is the tone of the generated text more professional than the email in the given input?", "Does the generated text convey the same meaning as the email in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Style"], ["Content"]], "output": "Subject: Request for Leave of Absence on [date]\n\nDear [Employer],\n\nI trust this message finds you well. \n\nI am writing to formally request a leave of absence on [date]. I have ensured that all my duties and responsibilities for the aforementioned date have been adequately addressed to prevent any disruption in the workflow. \n\nShould there be any queries or issues that may arise during my absence, please feel free to reach out to me. I will be readily available to provide necessary assistance or clarification.\n\nI appreciate your understanding and consideration in this matter.\n\nBest Regards,\n[Your name]", "id": "user_oriented_task_6", "eval": [true, null]}
{"input": "what we have _expected", "category": "ludwig.guru", "instruction": "Think of alternatives and paraphrases for the underlined word.", "decomposed_questions": ["Is the generated text a list of candidates for word replacement?", "Are the candidates in the generated text appropriate to replace the underlined word in the given input?"], "subset": "Easy_set", "question_label": [["Format", "Content"], ["Linguistic"]], "output": "anticipated, predicted, forecasted, projected, envisaged, foreseen, awaited, assumed, presumed, reckoned, thought, believed, estimated, calculated, planned, supposed", "id": "user_oriented_task_22", "eval": [true, null]}
{"input": "Daily tasks in the pharmacy", "category": "Notion", "instruction": "Write a to-do list based on the given information.", "decomposed_questions": ["Is the generated text a list of tasks to be completed?", "Are the tasks in the generated text daily tasks?", "Are the tasks in the generated text related to work in a pharmacy?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"], ["Content"]], "output": "1. Open the pharmacy and prepare for the day's operations.\n2. Check and restock inventory of medicines and other pharmacy products.\n3. Review and process prescriptions from doctors.\n4. Consult with patients about their medications, possible side effects, and any interactions.\n5. Answer customer queries about medications and health matters.\n6. Maintain and update patient records.\n7. Coordinate with insurance companies for medication coverage and payment.\n8. Clean and organize the pharmacy area.\n9. Monitor and manage the pharmacy's cash register.\n10. Prepare and dispense medications to patients.\n11. Conduct regular checks for expired or damaged medications.\n12. Order new stock from pharmaceutical suppliers.\n13. Attend to any emergency prescriptions.\n14. Provide health advice and recommend over-the-counter treatments.\n15. Close the pharmacy at the end of the day, ensuring all records and cash are secure.", "id": "user_oriented_task_121", "eval": [true, null]}
{"input": "Dynamic Programming", "category": "Leetcode", "instruction": "Design a programming problem related to the subject that has been given to you. Use some examples and constraints to improve your question.", "decomposed_questions": ["Does the generated text contain a programming problem?", "Does the generated text contain some examples of a programming problem?", "Does the generated text contain some constraints of a programming problem?", "Is the generated programming problem relevant to the subject in the given input?", "Are the generated examples helpful in explaining the generated programming problem?", "Are the generated constrains reasonable for the generated prompgramming probelm?"], "subset": "Easy_set", "question_label": [["Content"], ["Content"], ["Content"], ["Content"], ["Content"], ["Content"]], "output": "Problem:\n\nYou are given a list of integers, where each integer represents the maximum number of steps that can be jumped going forward from that element. Write a function to return the minimum number of jumps you must take in order to get from the start to the end of the list. For example, given `[6, 2, 4, 0, 5, 1, 1, 4, 2, 9]`, you should return `2`, as the optimal solution involves jumping from `6` to `5`, and then from `5` to `9`.\n\nFunction Signature: `int minJumps(List<Integer> list)`\n\nInput:\n1. A list of integers `list` (1 <= list.size() <= 1000) where each integer `n` (0 <= n <= 100) represents the maximum number of steps that can be jumped going forward from that element.\n\nOutput:\n1. Return an integer which represents the minimum number of jumps to reach the end of the list.\n\nExample:\n\nminJumps([6, 2, 4, 0, 5, 1, 1, 4, 2, 9]) should return 2\n\nminJumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]) should return 3\n\nNote:\n\nIn the first example, the optimal solution involves jumping from `6` to `5`, and then from `5` to `9`. So, the minimum number of jumps to reach the end of the list is `2`.\n\nIn the second example, the optimal solution involves jumping from `1` to `3`, then from `3` to `8`, and finally from `8` to `9`. So, the minimum number of jumps to reach the end of the list is `3`.\n\nConstraints:\n\nThis problem must be solved using dynamic programming.", "id": "user_oriented_task_92", "eval": [true, null]}
{"input": "This blog post is going to about making a list of last-minute gift ideas. Also, the tone of the post is going to be relaxed and casual.", "category": "Blogger", "instruction": "Design an outline for a blog post based on the given information and list the sections accordingly.", "decomposed_questions": ["Is the generated text an outline for a blog post?", "Does the generated outline contain a list of sections?", "Is the generated outline based on the information in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Format"], ["Content"]], "output": "Outline:\n\nI. Introduction\n   A. Brief overview of the blog post\n   B. Setting the relaxed and casual tone\n\nII. The Importance of Last-Minute Gift Ideas\n   A. Why last-minute gift ideas are necessary\n   B. Personal experiences with last-minute gift shopping\n\nIII. List of Last-Minute Gift Ideas\n   A. Introduction to the list\n   B. Detailed description of each gift idea\n      1. Pros and cons\n      2. Where to buy\n      3. Price range\n\nIV. Tips for Choosing the Perfect Last-Minute Gift\n   A. Understanding the recipient's preferences\n   B. Considering the occasion\n   C. Balancing quality and convenience\n\nV. Conclusion\n   A. Recap of the gift ideas listed\n   B. Encouragement for readers to share their own last-minute gift ideas\n   C. Casual sign-off", "id": "user_oriented_task_59", "eval": [true, null]}
{"input": "A meeting has been scheduled, and the sender expects the other to review the slides.", "category": "Gmail", "instruction": "A confirmation email should be written appropriately for the situation.", "decomposed_questions": ["Is the generated text a confirmation email?", "Is the generated email relevant to a scheduled meeting?", "Does the generated email mention that the receiver is expected to review the slides?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"], ["Content"]], "output": "Subject: Confirmation of Scheduled Meeting and Review of Slides\n\nDear [Recipient's Name],\n\nI hope this email finds you well. I am writing to confirm the meeting that has been scheduled for [date and time]. The purpose of this meeting is to discuss [briefly mention the topic of the meeting].\n\nIn preparation for the meeting, I have attached the slides that we will be reviewing. I kindly request that you take some time to go through them in advance. This will ensure that we can have a productive and efficient discussion during the meeting.\n\nPlease confirm your availability for the meeting and let me know if there are any specific points you would like to discuss. Your input is highly valued and will contribute significantly to the success of our meeting.\n\nIf you have any questions or need further clarification on any point, please do not hesitate to contact me. I am looking forward to our meeting and the valuable discussions that will ensue.\n\nThank you for your time and cooperation.\n\nBest Regards,\n\n[Your Name]\n[Your Position]\n[Your Contact Information]", "id": "user_oriented_task_73", "eval": [true, null]}
{"input": "New Employee onboarding", "category": "Jira", "instruction": "Write a Jira ticket for the given task.", "decomposed_questions": ["Is the generated text a Jira ticket?", "Is the generated text relevant to the task in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"]], "output": "Title: New Employee Onboarding Process\n\nDescription:\n\nAs we continue to grow and hire new team members, we need to ensure that our onboarding process is efficient, comprehensive, and welcoming. This task involves creating and implementing a new employee onboarding process.\n\nAcceptance Criteria:\n\n1. Research and document the current onboarding process.\n2. Identify areas of improvement in the current process.\n3. Develop a new, streamlined onboarding process.\n4. Create a detailed onboarding checklist for new hires.\n5. Develop a schedule for the first week of a new employee.\n6. Coordinate with all departments to ensure they are included in the onboarding process.\n7. Create a feedback system for new hires to rate and comment on their onboarding experience.\n8. Implement the new onboarding process.\n9. Monitor and adjust the process as necessary based on feedback.\n\nDue Date: [Insert Due Date]\n\nAssignee: [Insert Assignee Name]\n\nLabels: HR, Onboarding, New Hires, Process Improvement\n\nEpic Link: Employee Experience Improvement\n\nSprint: [Insert Sprint Name]\n\nStory Points: [Insert Story Points]", "id": "user_oriented_task_219", "eval": [true, null]}
{"input": "if (20 > 18) {\n  printf(\"20 is greater than 18\");\n}", "category": "w3schools", "instruction": "Identify the programming language used to write the given code.", "decomposed_questions": ["Does the generated text include a programming language?", "Is the generated programming language correct for the code in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"]], "output": "The programming language used to write the given code is C.", "id": "user_oriented_task_243", "eval": [true, null]}
{"input": "", "category": "Redfin", "instruction": "List some of the top real estate marketing words to add value to the listing and engage more potential buyers.", "decomposed_questions": ["Is the generated text a list of words?", "Are the words in the generated text real estate marketing words?", "Do the generated words add value to the listing?", "Do the generated words engage potential buyers?"], "subset": "Easy_set", "question_label": [["Format"], ["Content", "Linguistic"], ["Content"], ["Style"]], "output": "1. Luxurious\n2. Upgraded\n3. Spacious\n4. Elegant\n5. Exclusive\n6. Charming\n7. Modern\n8. Renovated\n9. Stunning\n10. Sophisticated\n11. Private\n12. Captivating\n13. Beautiful\n14. Breathtaking\n15. Immaculate\n16. Custom-built\n17. Desirable\n18. Unique\n19. Tranquil\n20. Prestigious\n21. High-end\n22. Gated\n23. Landscaped\n24. Turn-key\n25. State-of-the-art\n26. Open-concept\n27. Energy-efficient\n28. Convenient location\n29. Panoramic views\n30. Resort-style.", "id": "user_oriented_task_214", "eval": [true, null]}
{"input": "INGREDIENTS:\n2 (5 oz) cans Bumble Bee\u00ae Solid White Albacore Tuna, drained\n1 avocado\n2 Tbsp Sriracha\n1 Tbsp Dijon mustard\n2 to 3 Tbsp celery, chopped\n2 Tbsp red onion, chopped\n2 green onions, chopped\n1 Tbsp fresh cilantro, chopped\nSalt and pepper, to taste\n2 heaping cups leafy green lettuce\n1 cup matchstick carrots\n4 (10 inch) whole wheat tortillas\nINSTRUCTIONS:\nIn a medium bowl, mash together tuna and avocado until combined. Add in the rest of the ingredients through the salt and pepper, mixing well.\nTo assemble, top each tortilla with a 1/2 cup leafy greens, 1/4 cup matchstick carrots and divide the tuna mixture evenly among the wraps. Tightly roll up the tortilla, slice and enjoy!", "category": "Tasty", "instruction": "Provide a name for the dish given the ingredients and instructions.", "decomposed_questions": ["Is the generated text a name of a dish?", "Is the generated dish name relevant to the given ingredients and instructions?"], "subset": "Easy_set", "question_label": [["Content"], ["Content"]], "output": "\"Spicy Tuna and Avocado Wrap\"", "id": "user_oriented_task_201", "eval": [true, null]}
{"input": "Despite the _cacophony, the student tried to study. \nA. Loud sounds\nB. Difficult subject\nC. Late hour\nD. Low lighting", "category": "merriam-webster.com", "instruction": "Find the answer that best describes the underlined SAT word. Select the correct option and explain the meaning of the underlined word.", "decomposed_questions": ["Does the generated text provide an answer for the multiple-choice question in the given input?", "Does the generated text explain the meaning of the underlined word in the given input?", "Does the selected answer in the generated text best describe the underlined word in the given input?"], "subset": "Easy_set", "question_label": [["Format", "Content"], ["Content"], ["Content"]], "output": "Answer: \nA. Loud sounds\n\nExplanation: \nThe word 'cacophony' refers to a harsh, discordant mixture of sounds. Therefore, 'loud sounds' is the best description for the underlined word.", "id": "user_oriented_task_69", "eval": [true, null]}
{"input": "In spite of the fact that procrastination feels bad to you, why do you do it?", "category": "YouTube", "instruction": "Using the provided topic as a starting point, brainstorm ideas for videos that can be made about it on YouTube.", "decomposed_questions": ["Is the generated text a list of ideas?", "Are the generated ideas suitable for creating YouTube videos centered around the topic in the given input?"], "subset": "Easy_set", "question_label": [["Format"], ["Content"]], "output": "1. \"The Psychology Behind Procrastination: Why We Do It\"\n2. \"Procrastination: The Science Behind Why We Delay\"\n3. \"Understanding Procrastination: A Deep Dive into Our Habits\"\n4. \"Why We Procrastinate: A Neurological Perspective\"\n5. \"Procrastination: A Self-Analysis\"\n6. \"The Art of Procrastination: Why We Love to Delay\"\n7. \"Procrastination: A Social Experiment\"\n8. \"Breaking Down Procrastination: A Behavioral Study\"\n9. \"Procrastination: A Documentary\"\n10. \"The Hidden Benefits of Procrastination\"\n11. \"Procrastination: A Day in the Life of a Chronic Procrastinator\"\n12. \"Procrastination: A Roundtable Discussion with Psychologists\"\n13. \"Procrastination: Interviews with Successful People Who Procrastinate\"\n14. \"Procrastination: A Series of Case Studies\"\n15. \"Procrastination: A Live Experiment\"\n16. \"Procrastination: A Challenge - Can We Stop It?\"\n17. \"Procrastination: A Guided Meditation to Overcome It\"\n18. \"Procrastination: A 30-Day Challenge to Beat It\"\n19. \"Procrastination: A Personal Journey to Understanding Why We Do It\"\n20. \"Procrastination: A Comedy Sketch About Delaying Tasks\"", "id": "user_oriented_task_66", "eval": [true, null]}
{"input": "If you'd told me year ago that today I would finish a marathon, I would of laughed. Your support had a huge affect on me!", "category": "Grammarly", "instruction": "Rewrite the given text and correct grammar, spelling, and punctuation errors.", "decomposed_questions": ["Is the generated text free of spelling, punctuation, and grammatical errors?", "Does the generated text convey the same meaning as the source text?"], "subset": "Easy_set", "question_label": [["Linguistic"], ["Content"]], "output": "\"If you had told me a year ago that today I would finish a marathon, I would have laughed. Your support had a huge effect on me!\"", "id": "user_oriented_task_2", "eval": [false, null]}
